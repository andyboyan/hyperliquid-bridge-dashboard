"use client"; import { useState } from "react"; import { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from "recharts"; export default function MainSection() { const mockData = [ { date: "Jan 1", USDC: 100000, WETH: 80000, WBTC: 60000 }, { date: "Feb 1", USDC: 140000, WETH: 100000, WBTC: 80000 }, { date: "Mar 1", USDC: 180000, WETH: 120000, WBTC: 100000 } ]; const [visibleAssets, setVisibleAssets] = useState({ USDC: true, WETH: true, WBTC: true }); const assets = ["USDC", "WETH", "WBTC"]; const assetColors = { USDC: "#2775CA", WETH: "#627EEA", WBTC: "#F7931A" }; const toggleAsset = (asset) => { setVisibleAssets(prev => ({ ...prev, [asset]: !prev[asset] })); }; const calculateTotal = (asset) => { if (!visibleAssets[asset]) return 0; return mockData.reduce((sum, item) => sum + (item[asset] || 0), 0); }; const totalValue = assets.reduce((sum, asset) => sum + calculateTotal(asset), 0); const formatNumber = (num) => { return new Intl.NumberFormat("en-US", { style: "currency", currency: "USD", maximumFractionDigits: 0 }).format(num); }; return ( <div> <div className="mb-4"> <p className="font-medium mb-2">Filter by asset:</p> <div className="flex flex-wrap"> {assets.map(asset => ( <button key={asset} onClick={() => toggleAsset(asset)} className={`mr-2 mb-2 px-3 py-1 rounded-full text-sm ${visibleAssets[asset] ? "bg-gray-800 text-white" : "bg-gray-200 text-gray-800"}`}> <span className="inline-block w-2 h-2 rounded-full mr-1" style={{backgroundColor: assetColors[asset]}}></span> {asset} </button> ))} </div> </div> <div className="border rounded shadow-sm p-4 bg-white mb-4"> <h3 className="text-sm text-gray-500">Total Value Bridged</h3> <p className="text-2xl font-bold">{formatNumber(totalValue)}</p> <div className="flex flex-wrap mt-2"> {assets.map(asset => ( <div key={asset} className={`mr-4 ${!visibleAssets[asset] ? "opacity-50" : ""}`}> <span className="inline-block w-3 h-3 rounded-full mr-1" style={{backgroundColor: assetColors[asset]}}></span> {asset}: {formatNumber(calculateTotal(asset))} </div> ))} </div> </div> <div className="border rounded shadow-sm p-4 mb-8" style={{ height: "400px" }}> <ResponsiveContainer width="100%" height="100%"> <AreaChart data={mockData}> <CartesianGrid strokeDasharray="3 3" /> <XAxis dataKey="date" /> <YAxis /> <Tooltip formatter={(value) => formatNumber(value)} /> <Legend /> {assets.map(asset => ( visibleAssets[asset] && ( <Area key={asset} type="monotone" dataKey={asset} stackId="1" stroke={assetColors[asset]} fill={assetColors[asset]} name={asset} /> ) ))} </AreaChart> </ResponsiveContainer> </div> </div> ); }

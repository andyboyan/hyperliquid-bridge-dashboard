"use client"; import { useState } from "react"; import { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from "recharts"; export default function MainSection({ hyperlaneData, debridgeData }) { const [visibleAssets, setVisibleAssets] = useState({ USDC: true, WETH: true, WBTC: true }); const [visibleBridges, setVisibleBridges] = useState({ hyperlane: true, debridge: true }); const assets = ["USDC", "WETH", "WBTC"]; const assetColors = { USDC: "#2775CA", WETH: "#627EEA", WBTC: "#F7931A" }; const bridgeColors = { hyperlane: "#FF4A8D", debridge: "#00C389" }; const toggleAsset = (asset) => { setVisibleAssets(prev => ({ ...prev, [asset]: !prev[asset] })); }; const toggleBridge = (bridge) => { setVisibleBridges(prev => ({ ...prev, [bridge]: !prev[bridge] })); }; // Combine data from both bridges const combinedData = hyperlaneData.map((item, index) => { const result = { date: item.date }; assets.forEach(asset => { result[`hyperlane_${asset}`] = visibleBridges.hyperlane ? item[asset] : 0; result[`debridge_${asset}`] = visibleBridges.debridge ? debridgeData[index][asset] : 0; }); return result; }); const calculateTotal = (bridge, asset) => { if (!visibleAssets[asset] || !visibleBridges[bridge]) return 0; const data = bridge === "hyperlane" ? hyperlaneData : debridgeData; return data.reduce((sum, item) => sum + (item[asset] || 0), 0); }; const totalValue = assets.reduce((sum, asset) => { return sum + calculateTotal("hyperlane", asset) + calculateTotal("debridge", asset); }, 0); const formatNumber = (num) => { return new Intl.NumberFormat("en-US", { style: "currency", currency: "USD", maximumFractionDigits: 0 }).format(num); }; return ( <div> <div className="mb-4"> <p className="font-medium mb-2">Filter by asset:</p> <div className="flex flex-wrap"> {assets.map(asset => ( <button key={asset} onClick={() => toggleAsset(asset)} className={`mr-2 mb-2 px-3 py-1 rounded-full text-sm ${visibleAssets[asset] ? "bg-gray-800 text-white" : "bg-gray-200 text-gray-800"}`}> <span className="inline-block w-2 h-2 rounded-full mr-1" style={{backgroundColor: assetColors[asset]}}></span> {asset} </button> ))} </div> </div> <div className="mb-4"> <p className="font-medium mb-2">Filter by bridge:</p> <div className="flex flex-wrap"> <button onClick={() => toggleBridge("hyperlane")} className={`mr-2 mb-2 px-3 py-1 rounded-full text-sm ${visibleBridges.hyperlane ? "bg-gray-800 text-white" : "bg-gray-200 text-gray-800"}`}> <span className="inline-block w-2 h-2 rounded-full mr-1" style={{backgroundColor: bridgeColors.hyperlane}}></span> Hyperlane </button> <button onClick={() => toggleBridge("debridge")} className={`mr-2 mb-2 px-3 py-1 rounded-full text-sm ${visibleBridges.debridge ? "bg-gray-800 text-white" : "bg-gray-200 text-gray-800"}`}> <span className="inline-block w-2 h-2 rounded-full mr-1" style={{backgroundColor: bridgeColors.debridge}}></span> deBridge </button> </div> </div> <div className="border rounded shadow-sm p-4 bg-white mb-4"> <h3 className="text-sm text-gray-500">Total Value Bridged</h3> <p className="text-2xl font-bold">{formatNumber(totalValue)}</p> <div className="flex flex-wrap mt-2"> {["hyperlane", "debridge"].map(bridge => ( <div key={bridge} className={`mr-6 mb-2 ${!visibleBridges[bridge] ? "opacity-50" : ""}`}> <p className="font-medium" style={{color: bridgeColors[bridge]}}>{bridge === "hyperlane" ? "Hyperlane" : "deBridge"}</p> {assets.map(asset => ( <div key={`${bridge}-${asset}`} className={`ml-2 mb-1 ${!visibleAssets[asset] ? "opacity-50" : ""}`}> <span className="inline-block w-2 h-2 rounded-full mr-1" style={{backgroundColor: assetColors[asset]}}></span> {asset}: {formatNumber(calculateTotal(bridge, asset))} </div> ))} </div> ))} </div> </div> <div className="border rounded shadow-sm p-4 mb-8" style={{ height: "400px" }}> <ResponsiveContainer width="100%" height="100%"> <AreaChart data={combinedData}> <CartesianGrid strokeDasharray="3 3" /> <XAxis dataKey="date" /> <YAxis /> <Tooltip formatter={(value, name) => { const [bridge, asset] = name.split("_"); return [`${formatNumber(value)}`, `${asset} (${bridge === "hyperlane" ? "Hyperlane" : "deBridge"})`]; }} /> <Legend formatter={(value) => { const [bridge, asset] = value.split("_"); return `${asset} (${bridge === "hyperlane" ? "Hyperlane" : "deBridge"})`; }} /> {assets.map(asset => ( visibleAssets[asset] && visibleBridges.hyperlane && ( <Area key={`hyperlane_${asset}`} type="monotone" dataKey={`hyperlane_${asset}`} stackId="1" stroke={assetColors[asset]} fill={assetColors[asset]} fillOpacity={0.8} name={`hyperlane_${asset}`} /> ) ))} {assets.map(asset => ( visibleAssets[asset] && visibleBridges.debridge && ( <Area key={`debridge_${asset}`} type="monotone" dataKey={`debridge_${asset}`} stackId="1" stroke={assetColors[asset]} fill={assetColors[asset]} fillOpacity={0.5} name={`debridge_${asset}`} /> ) ))} </AreaChart> </ResponsiveContainer> </div> </div> ); }
